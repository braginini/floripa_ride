/*1d5d8e5c24d11c158f30c774231635b1f4524a7d*/var ROOT=WScript.ScriptFullName.split("\\cordova\\lib\\cordova.js").join(""),shell=WScript.CreateObject("WScript.Shell"),fso=WScript.CreateObject("Scripting.FileSystemObject");var device_id;var NONE=0,DEBUG="--debug",RELEASE="--release",NO_BUILD="--nobuild";var build_type=NONE;var NONE=0,EMULATOR=1,DEVICE=2,TARGET=3;var deploy_type=NONE;function Log(b,a){if(a){WScript.StdErr.WriteLine(b)}else{WScript.StdOut.WriteLine(b)}}function exec(d){var c=shell.Exec(d);var b=new String();while(c.Status==0){if(!c.StdOut.AtEndOfStream){var a=c.StdOut.ReadLine();b+=a}WScript.sleep(100)}return b}function exec_out(d){var c=shell.Exec(d);var b=new String();while(c.Status==0){if(!c.StdOut.AtEndOfStream){var a=c.StdOut.ReadLine();b+=a}WScript.sleep(100)}if(!c.StdErr.AtEndOfStream){var a=c.StdErr.ReadAll();return{error:true,output:a}}return{error:false,output:b}}function exec_verbose(c){var a=shell.Exec(c);while(a.Status==0){WScript.sleep(100);if(!a.StdOut.AtEndOfStream){var b=a.StdOut.ReadLine();Log(b)}}if(!a.StdErr.AtEndOfStream){var b=a.StdErr.ReadAll();Log(b,true);WScript.Quit(2)}}function version(h){var g=h+"\\assets\\www\\cordova.js";if(fso.FileExists(g)){var e=fso.OpenTextFile(g,1,2);var d=e.ReadAll();e.Close();var b=/^.*CORDOVA_JS_BUILD_LABEL.*$/m;var a=d.match(b)+"";var c=a.match(/(\d+)\.(\d+)\.(\d+)(rc\d)?/)+"";Log(c.substr(0,((c.length/2)-1)))}else{Log("Error : Could not find cordova js.",true);Log("Expected Location : "+g,true);WScript.Quit(2)}}function get_devices(){var b=[];var a=shell.Exec("%comspec% /c adb devices").StdOut.ReadAll();if(a.match(/\w+\tdevice/)){devices=a.split("\r\n");for(i in devices){if(devices[i].match(/\w+\tdevice/)&&!devices[i].match(/emulator/)){b.push(devices[i].replace(/\t/," "))}}}return b}function list_devices(){var a=get_devices();if(a.length>0){for(i in a){Log(a[i])}}else{Log("No devices found, if your device is connected and not showing,");Log(" then try and install the drivers for your device.");Log(" http://developer.android.com/tools/extras/oem-usb.html")}}function get_emulator_images(){var d=[];var a=shell.Exec("%comspec% /c android list avds").StdOut.ReadAll();if(a.match(/Name\:/)){emulators=a.split("\n");var e=0;var b="";for(i in emulators){if(emulators[i].match(/Name\:/)){var c=emulators[i].replace(/\s*Name\:\s/,"")+" ";d.push(c)}}}return d}function list_emulator_images(){var a=get_emulator_images();if(a.length>0){for(i in a){Log(a[i])}}else{Log("No emulators found, if you would like to create an emulator follow the instructions");Log(" provided here : http://developer.android.com/tools/devices/index.html");Log(" Or run 'android create avd --name <name> --target <targetID>' in on the command line.")}}function get_started_emulators(){var b=[];var a=shell.Exec("%comspec% /c adb devices").StdOut.ReadAll();if(a.match(/emulator/)){devices=a.split("\r\n");for(i in devices){if(devices[i].match(/\w+\tdevice/)&&devices[i].match(/emulator/)){b.push(devices[i].replace(/\t/," "))}}}return b}function list_started_emulators(){var a=get_started_emulators();if(a.length>0){for(i in a){Log(a[i])}}else{Log("No started emulators found, if you would like to start an emulator call ");Log("'list-emulator-images'");Log(" to get the name of an emulator and then start the emulator with");Log("'start-emulator <Name>'")}}function create_emulator(){var a=shell.Exec("android.bat list targets").StdOut.ReadAll().match(/id:\s\d+/g);if(a){exec("%comspec% /c android create avd --name cordova_emulator --target "+a[a.length-1].replace(/id: /,""))}else{Log("You do not have any android targets setup. Please create at least one target with the `android` command so that an emulator can be created.",true);WScript.Quit(69)}}function start_emulator(a){var d=get_emulator_images();var j=get_started_emulators();var h=j.length;var k;var f=false;if(a){for(b in d){if(d[b].substr(0,a.length)==a){Log("Starting emulator : "+a);shell.Exec("%comspec% /c emulator -avd "+a+" &");f=true}}}else{if(d.length>0&&j.length==0){k=d[0].split(" ",1)[0];start_emulator(k);return}else{if(j.length>0){Log("Emulator already started : "+j[0].split(" ",1));return}else{Log("Error : unable to start emulator, ensure you have emulators availible by checking 'list-emulator-images'",true);WScript.Quit(2)}}}if(!f){Log("Error : unable to start emulator, ensure you have emulators availible by checking 'list-emulator-images'",true);WScript.Quit(2)}else{Log("Waiting for emulator...");var c=null;var g=null;var e=null;var b=0;while(g==null&&b<10){e=get_started_emulators();if(e.length>j.length){for(var b=0;b<e.length;b++){if(e[b]!=j[b]){g=e[b].split(" ",1)[0];c=exec_out("%comspec% /c adb -s "+g+" shell getprop init.svc.bootanim");break}}}}if(b==10){Log("\nEmulator start timed out.");WScript.Quit(2)}b=0;WScript.Stdout.Write("Booting up emulator (this may take a while).");while(!c.output.match(/stopped/)&&b<100){c=exec_out("%comspec% /c adb -s "+g+" shell getprop init.svc.bootanim");b++;WScript.Stdout.Write(".");WScript.Sleep(2000)}if(b<100){Log("\nBoot Complete!");shell.Exec("%comspec% /c adb -s "+g+" shell input keyevent 82")}else{Log("\nEmulator boot timed out. Failed to load emulator");WScript.Quit(2)}}}function get_apk(c){if(fso.FolderExists(c+"\\bin")){var b;var a=fso.GetFolder(c+"\\bin");var d=new Enumerator(a.Files);for(;!d.atEnd();d.moveNext()){var c=d.item()+"";if(fso.GetExtensionName(c)=="apk"&&!c.match(/unaligned/)){b=d.item();break}}if(b){return b}else{Log("Failed to find apk, make sure you project is built and there is an ",true);Log(" apk in <project>\\bin\\.  To build your project use '<project>\\cordova\\build'",true);WScript.Quit(2)}}}function install_device(c){var a=get_devices();var b=false;if(a.length<1){Log("Error : No devices found to install to, make sure there are devices",true);Log(" availible by checking '<project_dir>\\cordova\\lib\\list-devices'",true);WScript.Quit(2)}launch(c,a[0].split(" ",1)[0],true)}function install_emulator(c){var b=get_started_emulators();var a=false;if(b.length<1){Log("Error : No emulators found to install to, make sure there are emulators",true);Log(" availible by checking '<project_dir>\\cordova\\lib\\list-started-emulators'",true);WScript.Quit(2)}launch(c,b[0].split(" ",1)[0],false)}function install_target(e){if(device_id){var d=false;var c=get_started_emulators();var a=get_devices();var b=false;for(i in c){if(c[i].substr(0,device_id.length)==device_id){b=true;break}}for(i in a){if(a[i].substr(0,device_id.length)==device_id){b=true;d=true;break}}if(!b){Log("Error : Unable to find target "+device_id,true);Log("Please ensure the target exists by checking '<project>\\cordova\\lib\\list-started-emulators'");Log(" Or  '<project>\\cordova\\lib\\list-devices'")}launch(e,device_id,d)}else{Log("You cannot install to a target without providing a valid target ID.",true);WScript.Quit(2)}}function launch(f,g,c){if(g){var b=get_apk(f);if(b){var a=exec_out("%comspec% /c java -jar "+f+"\\cordova\\appinfo.jar "+f+"\\AndroidManifest.xml");if(a.error){Log("Failed to get application name from appinfo.jar + AndroidManifest : ",true);Log("Output : "+a.output,true);WScript.Quit(2)}if(c){Log("Installing app on device...")}else{Log("Installing app on emulator...")}var e="%comspec% /c adb -s "+g+" install -r "+b;var d=exec_out(e);if(d.error&&d.output.match(/Failure/)){Log("Error : Could not install apk to emulator : ",true);Log(d.output,true);WScript.Quit(2)}else{Log(d.output)}Log("Launching application...");e="%comspec% /c adb -s "+g+" shell am start -W -a android.intent.action.MAIN -n "+a.output;exec_verbose(e)}else{Log("Failed to find apk, make sure you project is built and there is an ",true);Log(" apk in <project>\\bin\\.  To build your project use '<project>\\cordova\\build'",true);WScript.Quit(2)}}else{Log("You cannot install to a target without providing a valid target ID.",true);WScript.Quit(2)}}function clean(a){Log("Cleaning project...");exec("%comspec% /c ant.bat clean -f "+a+"\\build.xml 2>&1")}function log(){shell.Run("%comspec% /c adb logcat | grep -v nativeGetEnabledTags")}function build(a){switch(build_type){case DEBUG:clean(a);Log("Building project...");exec_verbose("%comspec% /c ant.bat debug -f "+a+"\\build.xml 2>&1");break;case RELEASE:clean(a);Log("Building project...");exec_verbose("%comspec% /c ant.bat release -f "+a+"\\build.xml 2>&1");break;case NO_BUILD:Log("Skipping build process.");break;case NONE:clean(a);Log("WARNING: [ --debug | --release | --nobuild ] not specified, defaulting to --debug.");exec_verbose("%comspec% /c ant.bat debug -f "+a+"\\build.xml 2>&1");break;default:Log("Build option not recognized: "+build_type,true);WScript.Quit(2);break}}function run(a){switch(deploy_type){case EMULATOR:build(a);if(get_started_emulators().length==0){start_emulator()}install_emulator(a);break;case DEVICE:build(a);install_device(a);break;case TARGET:build(a);install_target(a);break;case NONE:if(get_devices().length>0){Log("WARNING: [ --target=<ID> | --emulator | --device ] not specified, defaulting to --device");deploy_type=DEVICE}else{Log("WARNING: [ --target=<ID> | --emulator | --device ] not specified, defaulting to --emulator");deploy_type=EMULATOR}run(a);break;default:Log("Deploy option not recognized: "+deploy_type,true);WScript.Quit(2);break}}var args=WScript.Arguments;if(args.count()==0){Log("Error: no args provided.");WScript.Quit(2)}else{switch(args(0)){case"version":version(ROOT);break;case"build":if(args.Count()>1){if(args(1)=="--release"){build_type=RELEASE}else{if(args(1)=="--debug"){build_type=DEBUG}else{if(args(1)=="--nobuild"){build_type=NO_BUILD}else{Log('Error: "'+args(i)+'" is not recognized as a build option',true);WScript.Quit(2)}}}}build(ROOT);break;case"clean":clean();break;case"log":log();break;case"list-devices":list_devices();break;case"list-emulator-images":list_emulator_images();break;case"list-started-emulators":list_started_emulators();break;case"start-emulator":if(args.Count()>1){start_emulator(args(1))}else{start_emulator()}break;case"install-emulator":if(args.Count()==2){if(args(1).substr(0,9)=="--target="){device_id=args(1).split("--target=").join("");install_emulator(ROOT)}else{Log('Error: "'+args(1)+'" is not recognized as an install option',true);WScript.Quit(2)}}else{install_emulator(ROOT)}break;case"install-device":if(args.Count()==2){if(args(1).substr(0,9)=="--target="){device_id=args(1).split("--target=").join("");install_target(ROOT)}else{Log('Error: "'+args(1)+'" is not recognized as an install option',true);WScript.Quit(2)}}else{install_device(ROOT)}break;case"run":for(var i=1;i<args.Count();i++){if(args(i)=="--release"){build_type=RELEASE}else{if(args(i)=="--debug"){build_type=DEBUG}else{if(args(i)=="--nobuild"){build_type=NO_BUILD}else{if(args(i)=="--emulator"||args(i)=="-e"){deploy_type=EMULATOR}else{if(args(i)=="--device"||args(i)=="-d"){deploy_type=DEVICE}else{if(args(i).substr(0,9)=="--target="){device_id=args(i).split("--target=").join("");deploy_type=TARGET}else{Log('Error: "'+args(i)+'" is not recognized as a run option',true);WScript.Quit(2)}}}}}}}run(ROOT);break;default:Log("Cordova does not regognize the command "+args(0),true);WScript.Quit(2);break}};